{"version":3,"sources":["App/layout/Loader/index.js","App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","index.js","hoc/_Aux/index.js","store.js","config.js"],"names":["loader","className","ScrollToTop","prevProps","this","props","location","window","scrollTo","children","React","Component","withRouter","route","path","exact","name","component","lazy","App","AdminLayout","Loadable","loading","Loader","menu","routes","map","index","Route","render","getLibrary","provider","library","Web3Provider","pollingInterval","fallback","Switch","Boolean","hostname","match","app","BrowserRouter","basename","config","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Aux","initialState","gasPrice","store","createContext","Provider","StateProvider","useReducer","state","action","type","Object","assign","Error","dispatch","value","default_var","defaultPath","layout","preLayout","collapseMenu","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize"],"mappings":"6TAYeA,EAVA,WACX,OACI,qBAAKC,UAAU,YAAf,SACI,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,qB,6CCHzBC,E,wKACF,SAAmBC,GACXC,KAAKC,MAAMC,WAAaH,EAAUG,UAClCC,OAAOC,SAAS,EAAG,K,oBAI3B,WACI,OAAOJ,KAAKC,MAAMI,a,GARAC,IAAMC,WAYjBC,cAAWV,GCLXW,EALD,CACV,CAAEC,KAAM,iBAAkBC,OAAO,EAAMC,KAAM,WAAYC,UAJ7CP,IAAMQ,MAAK,kBAAM,yDAK7B,CAAEJ,KAAM,iBAAkBC,OAAO,EAAMC,KAAM,WAAYC,UAJ7CP,IAAMQ,MAAK,kBAAM,0D,gBCkDlBC,MAxCf,WAOE,IAAMC,EAAcC,IAAS,CAC3BrB,OAAQ,kBAAM,qDACdsB,QAASC,IAGLC,EAAOC,EAAOC,KAAI,SAACb,EAAOc,GAC9B,OAAOd,EAAMI,UACX,cAACW,EAAA,EAAD,CAEEd,KAAMD,EAAMC,KACZC,MAAOF,EAAME,MACbC,KAAMH,EAAMG,KACZa,OAAQ,SAACxB,GAAD,OAAW,cAACQ,EAAMI,UAAP,eAAqBZ,MAJnCsB,GAML,QAGN,OACE,cAAC,IAAD,CAAmBG,WAxBrB,SAAoBC,GAClB,IAAMC,EAAU,IAAIC,IAAaF,GAEjC,OADAC,EAAQE,gBAAkB,KACnBF,GAqBP,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAUG,SAAU,cAACZ,EAAD,IAApB,SACE,eAACa,EAAA,EAAD,WACGZ,EACD,cAACI,EAAA,EAAD,CAAOd,KAAK,IAAIG,UAAWG,gBChCrBiB,QACW,cAA7B9B,OAAOD,SAASgC,UAEe,UAA7B/B,OAAOD,SAASgC,UAEhB/B,OAAOD,SAASgC,SAASC,MACvB,2D,oBCTAC,EACJ,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAeC,SAAUC,IAAOD,SAAhC,SACE,cAAC,EAAD,QAKNE,IAASf,OAAOW,EAAKK,SAASC,eAAe,SDgHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCEjIJC,IAFH,SAAChD,GAAD,OAAWA,EAAMI,W,+HCEvB6C,EAAe,CACnBC,SAAU,MAENC,EAAQC,wBAAcH,GACpBI,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAAkB,IAAhBlD,EAAe,EAAfA,SAAe,EACZmD,sBAAW,SAACC,EAAOC,GAC3C,OAAQA,EAAOC,MACb,IAAK,mBACH,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC9BN,SAAUO,EAAOP,WAErB,QACE,MAAM,IAAIW,MAAM,0BAEnBZ,GAVmC,mBAC/BO,EAD+B,KACxBM,EADwB,KAYtC,OAAO,cAACT,EAAD,CAAUU,MAAO,CAAEP,QAAOM,YAA1B,SAAuC1D,M,gCCMjC4D,IA1BK,CAChBC,YAAa,IACb5B,SAAU,IACV6B,OAAQ,WACRC,UAAW,KACXC,cAAc,EACdC,WAAY,aACZC,cAAc,EACdC,gBAAiB,iBACjBC,aAAc,iBACdC,cAAe,gBACfC,cAAc,EACdC,WAAW,EACXC,gBAAgB,EAChBC,mBAAmB,EACnBC,WAAW,EACXC,gBAAiB,SACjBC,YAAa,SACbC,mBAAoB,iBACpBC,kBAAmB,gBACnBC,kBAAkB,EAClBC,aAAa,EACbC,kBAAoB,mEACpBC,gBAAkB,M","file":"static/js/main.83ac9d84.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader-bg\">\r\n            <div className=\"loader-track\">\r\n                <div className=\"loader-fill\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default loader;","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\n\r\nconst SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\r\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\r\n\r\nconst route = [\r\n    { path: '/auth/signup-1', exact: true, name: 'Signup 1', component: SignUp1 },\r\n    { path: '/auth/signin-1', exact: true, name: 'Signin 1', component: Signin1 }\r\n];\r\n\r\nexport default route;","import React, { Suspense } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Loadable from \"react-loadable\";\n\nimport \"../../node_modules/font-awesome/scss/font-awesome.scss\";\n\nimport Loader from \"./layout/Loader\";\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from \"./layout/ScrollToTop\";\nimport routes from \"../route\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nfunction App() {\n  function getLibrary(provider) {\n    const library = new Web3Provider(provider);\n    library.pollingInterval = 12000;\n    return library;\n  }\n\n  const AdminLayout = Loadable({\n    loader: () => import(\"./layout/AdminLayout\"),\n    loading: Loader,\n  });\n\n  const menu = routes.map((route, index) => {\n    return route.component ? (\n      <Route\n        key={index}\n        path={route.path}\n        exact={route.exact}\n        name={route.name}\n        render={(props) => <route.component {...props} />}\n      />\n    ) : null;\n  });\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Aux>\n        <ScrollToTop>\n          <Suspense fallback={<Loader />}>\n            <Switch>\n              {menu}\n              <Route path=\"/\" component={AdminLayout} />\n            </Switch>\n          </Suspense>\n        </ScrollToTop>\n      </Aux>\n    </Web3ReactProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport config from \"./config\";\nimport { StateProvider } from \"./store.js\";\n\nconst app = (\n  <StateProvider>\n    <BrowserRouter basename={config.basename}>\n      <App />\n    </BrowserRouter>\n  </StateProvider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const Aux = (props) => props.children;\r\n\r\nexport default Aux;","import React, { createContext, useReducer } from \"react\";\n\nconst initialState = {\n  gasPrice: null,\n};\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"UPDATE_GAS_PRICE\":\n        return Object.assign({}, state, {\n          gasPrice: action.gasPrice,\n        });\n      default:\n        throw new Error(\"Unknown action type\");\n    }\n  }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","const default_var = {\r\n    defaultPath: '/',\r\n    basename: '/', // only at build time to set, like /datta-able\r\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\r\n    preLayout: null, // (not available in lite version)\r\n    collapseMenu: false, // mini-menu\r\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\r\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\r\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\r\n    navBackImage: false, // not available in lite version\r\n    rtlLayout: false, // not available in lite version\r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, // not available in lite version\r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\r\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\r\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\r\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\r\n    navListTitleHide: false, // not available in lite version\r\n    configBlock: false, // not available in lite version\r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\r\n    layout6BackSize : '', // used only for pre-layout = layout-6\r\n};\r\n\r\nexport default default_var;"],"sourceRoot":""}